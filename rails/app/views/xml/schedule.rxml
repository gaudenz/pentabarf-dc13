xml.instruct!
xml.schedule do
  xml.conference do
    xml.title @conference.title
    xml.subtitle @conference.subtitle
    xml.venue @conference.venue
    xml.city @conference.city
    xml.start @days.first.conference_day.strftime('%Y-%m-%d')
    xml.end( @days.last.conference_day.strftime('%Y-%m-%d') )
    xml.days @days.length
    xml.release @conference.release
    xml.day_change @conference.day_change.strftime('%H:%M')
    xml.timeslot_duration @conference.timeslot_duration.strftime('%H:%M')
  end
  @days.each_with_index do | day, index |
    xml.day(:index=>index + 1,:date=>day.conference_day.to_s) do
      @rooms.each do | room |
        xml.room({:name => room.conference_room}) do
          room_events = {}
          @events.select{|e| e.conference_day == day.conference_day && e.conference_room == room.conference_room}.each do | event |
            next if room_events.values.member?( event.event_id )
            room_events[event.start_time.strftime('%H:%M')] = event.event_id
          end

          room_events.keys.sort.each do | start_time |
            event_id = room_events[start_time]
            event = @events.select{|e| e.event_id == event_id}.first
            xml.event(:id=>event_id) do
              xml.start event.real_starttime.strftime('%H:%M')
              xml.duration event.duration.strftime('%H:%M')
              xml.room event.conference_room
              xml.tag event.event_tag
              xml.title event.title
              xml.subtitle event.subtitle
              xml.track event.conference_track
              xml.type event.event_type
              xml.language event.language
              xml.abstract event.abstract
              xml.description event.description
              xml.persons do
                @events.select{|e| e.event_id == event_id}.each do | speaker |
                  xml.person( speaker.name, {:id=>speaker.person_id} )
                end
              end
              xml.links do
                links = Event_link.select({:event_id=>event_id})
                links.each do | link |
                  xml.link( link.title ? link.title : link.url, {:href=>link.url})
                end
              end
              vers = Video_event_recording.select({:event_id => event.event_id})
              formats = Video_target_format.select(:published => true)
              if vers.length > 0
                xml.recordings do
                  vers.each do | ver |
                    formats.each do |f|
                      vtf = Video_target_file.select(:event_id => ver.id, :target_format_id => f.id, :file_status_id => {:ne => 6})
                      if vtf.length > 0
                        #evenworsehack to get this stuff right for dc10, up to (including) dc16
                        vtlink=""
                        if @conference.title[-1,1].to_i > 7
                          #hack to get the links right for dc7-dc9 FIXME: add the base url to the conference data?
                          vtlink="http://meetings-archive.debian.net/pub/debian-meetings/200#{@conference.title[-1,1]}/#{@conference.title.downcase}/#{f.target_format_abbr}/#{ver.event_recording_base_name.gsub(/^\/+/, '')}.#{f.filename_extension.gsub(/^\.+/, '')}"
                        else
                          vtlink="http://meetings-archive.debian.net/pub/debian-meetings/20#{@conference.title[-2,2]}/#{@conference.title.downcase}/#{f.target_format_abbr}/#{ver.event_recording_base_name.gsub(/^\/+/, '')}.#{f.filename_extension.gsub(/^\.+/, '')}"
                        end
                        xml.recording(:type => "#{f.target_format_abbr} #{f.filename_extension.gsub(/^\.+/, '')}",:href => vtlink)
                      end
                    end
                  end
                end
              end
            end
          end

        end
      end
    end
  end

end
