#!/usr/bin/env ruby

require 'yaml'
require 'xmpp4r'
require 'socket'
require 'thread'
require 'rexml/document'

config = YAML::load_file('config/jabber.yml')
sockpath = config['daemon']['socket_path']
jid = Jabber::JID.new(config['daemon']['jid'])

client = Jabber::Client.new(jid)
client.connect(config['daemon']['server'], config['daemon']['port'])
client.auth(config['daemon']['password'])

client.send(Jabber::Presence.new( nil, 'Pentabarf' ) )

puts "connected"

client.add_message_callback { |msg|
  reply = Jabber::XMLStanza.answer(msg, false)
  reply.type = msg.type
  puts "Message from #{msg.from}: #{msg.body}"
  reply.set_body("All answers shall be shallow")
  client.send(reply)
}

Thread.start do
  begin
    File.unlink(sockpath)
  rescue
  end
  sock = UNIXServer.open(sockpath)
  while unixclient = sock.accept
    text = ""
    received = false
    while !received
      text += unixclient.recvfrom(1024).shift
      begin
        stanza = Jabber::Message.new.import(REXML::Document.new(text).root)
        received = true if text =~ /<\/message>$/
      rescue Exception => e
        puts e
      end
    end
    puts text
    client.send(stanza)
    unixclient.close
  end
end

Thread.stop

